#!/usr/bin/env python3
"""
Setup script for DeepSeek API testing
This script helps you safely configure your DeepSeek API key for testing
"""

import os
import sys
from pathlib import Path

def create_env_file():
    """Create .env file with DeepSeek configuration"""
    
    # Check if .env already exists
    env_path = Path('.env')
    if env_path.exists():
        print("‚ö†Ô∏è  .env file already exists!")
        response = input("Do you want to overwrite it? (y/n): ")
        if response.lower() != 'y':
            print("Keeping existing .env file")
            return
    
    # Get API key from user
    print("\nüîë DeepSeek API Key Setup")
    print("Get your API key from: https://platform.deepseek.com/")
    print()
    
    api_key = input("Enter your DeepSeek API key: ").strip()
    
    if not api_key:
        print("‚ùå No API key provided. Setup cancelled.")
        return
    
    # Create .env content
    env_content = f"""# DeepSeek API Configuration
# Generated by setup_deepseek_test.py

# LLM Provider
LLM_PROVIDER=deepseek

# DeepSeek API Key
DEEPSEEK_API_KEY={api_key}

# Model Configuration
LLM_MODEL=deepseek-chat
LLM_MAX_TOKENS=2000
LLM_TEMPERATURE=0.7

# Retry Configuration
LLM_RETRY_ATTEMPTS=3
LLM_RETRY_DELAY=1.0

# Other API Keys (commented out)
# OPENAI_API_KEY=your_openai_api_key_here
# ANTHROPIC_API_KEY=your_anthropic_api_key_here
"""
    
    # Write .env file
    try:
        with open('.env', 'w') as f:
            f.write(env_content)
        print("‚úÖ .env file created successfully!")
        print(f"   API key: {api_key[:8]}...{api_key[-4:]}")
        print("   File location: .env")
        print("   ‚ö†Ô∏è  Remember: .env is in .gitignore, so it won't be committed to git")
        
    except Exception as e:
        print(f"‚ùå Error creating .env file: {e}")

def test_environment():
    """Test if environment is properly configured"""
    print("\nüß™ Testing Environment Configuration")
    
    # Load environment variables
    from dotenv import load_dotenv
    load_dotenv()
    
    # Check API key
    api_key = os.getenv("DEEPSEEK_API_KEY")
    if not api_key:
        print("‚ùå DEEPSEEK_API_KEY not found in environment")
        return False
    
    print(f"‚úÖ DEEPSEEK_API_KEY found: {api_key[:8]}...{api_key[-4:]}")
    
    # Check other settings
    provider = os.getenv("LLM_PROVIDER", "not_set")
    model = os.getenv("LLM_MODEL", "not_set")
    
    print(f"‚úÖ LLM_PROVIDER: {provider}")
    print(f"‚úÖ LLM_MODEL: {model}")
    
    return True

def show_test_instructions():
    """Show instructions for testing"""
    print("\nüìã Testing Instructions")
    print("=" * 50)
    print("1. Run the test script:")
    print("   python -m tests.test_deepseek_api")
    print()
    print("2. Or test directly in Python:")
    print("   from app.core.llm_service import get_llm_service")
    print("   service = get_llm_service()")
    print("   response = await service.chat_completion([{'role': 'user', 'content': 'Hello'}])")
    print()
    print("3. Or use the configuration directly:")
    print("   from app.core.llm_service import LLMConfig, LLMServiceFactory")
    print("   config = LLMConfig(provider='deepseek', api_key='your_key')")
    print("   service = LLMServiceFactory.create_service(config)")

def main():
    """Main setup function"""
    print("üöÄ DeepSeek API Setup")
    print("=" * 50)
    
    # Check if we're in the right directory
    if not Path('app').exists():
        print("‚ùå Please run this script from the project root directory")
        sys.exit(1)
    
    # Create .env file
    create_env_file()
    
    # Test environment
    if test_environment():
        print("\n‚úÖ Environment configured successfully!")
        show_test_instructions()
    else:
        print("\n‚ùå Environment configuration failed")
        print("Please check your .env file and try again")

if __name__ == "__main__":
    main() 